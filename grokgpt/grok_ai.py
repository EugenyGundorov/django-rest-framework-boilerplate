import os
import sys
import io
import json
import re
import requests
from dotenv import load_dotenv

# ---------- UTF-8 вывод ----------
if hasattr(sys.stdout, "reconfigure"):
    sys.stdout.reconfigure(encoding="utf-8")
else:
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8")

os.environ.setdefault("PYTHONIOENCODING", "utf-8")
os.environ.setdefault("LANG", "ru_RU.UTF-8")
os.environ.setdefault("LC_ALL", "ru_RU.UTF-8")

# ---------- Настройки ----------
LIMIT = 4000  # лимит символов для одного сообщения Telegram
URL = "https://api.x.ai/v1/chat/completions"
TIMEOUT = (15, 300)  # connect=15s, read=300s
IGNORE_PROXIES = False  # при необходимости можно поставить True

# ---------- Разрезчик текста ----------
def split_long_sentence(sentence: str, limit: int) -> list[str]:
    parts: list[str] = []
    atoms = re.split(r'(?<=[;,:])\s+', sentence)
    buf = ""
    for a in atoms:
        a = a.strip()
        if not a:
            continue
        if len(a) > limit:
            i = 0
            while i < len(a):
                end = min(i + limit, len(a))
                cut = max(a.rfind(" ", i, end), a.rfind("\n", i, end))
                if cut == -1 or cut <= i + int(limit * 0.6):
                    cut = end
                chunk = a[i:cut].strip()
                if chunk:
                    if buf and len(buf) + 1 + len(chunk) <= limit:
                        buf = f"{buf} {chunk}"
                    else:
                        if buf:
                            parts.append(buf)
                        buf = chunk
                i = cut
            continue
        if buf and len(buf) + 1 + len(a) <= limit:
            buf = f"{buf} {a}"
        else:
            if buf:
                parts.append(buf)
            buf = a
    if buf:
        parts.append(buf)
    return parts

def smart_split_paragraph(paragraph: str, limit: int) -> list[str]:
    sentences = re.split(r'(?<=[\.\!\?\…])\s+', paragraph.strip())
    chunks: list[str] = []
    buf = ""
    for s in sentences:
        s = s.strip()
        if not s:
            continue
        if len(s) > limit:
            for piece in split_long_sentence(s, limit):
                if len(piece) <= limit:
                    if buf and len(buf) + 1 + len(piece) <= limit:
                        buf = f"{buf} {piece}"
                    else:
                        if buf:
                            chunks.append(buf)
                        buf = piece
                else:
                    for i in range(0, len(piece), limit):
                        seg = piece[i:i+limit]
                        if buf:
                            chunks.append(buf)
                        buf = seg
            continue
        if buf and len(buf) + 1 + len(s) <= limit:
            buf = f"{buf} {s}"
        else:
            if buf:
                chunks.append(buf)
            buf = s
    if buf:
        chunks.append(buf)
    return chunks

def split_text_for_telegram(text: str, limit: int = LIMIT) -> list[str]:
    paragraphs = re.split(r'\n{2,}', text.strip())
    messages: list[str] = []
    buf = ""
    def flush():
        nonlocal buf
        if buf:
            messages.append(buf.rstrip())
            buf = ""
    for p in paragraphs:
        p = p.strip()
        if not p:
            continue
        sep = "\n\n" if buf else ""
        if len(p) <= limit:
            if len(buf) + len(sep) + len(p) <= limit:
                buf = f"{buf}{sep}{p}"
            else:
                flush(); buf = p
        else:
            parts = smart_split_paragraph(p, limit)
            for part in parts:
                if len(part) <= limit:
                    if len(buf) + len(sep) + len(part) <= limit:
                        buf = f"{buf}{sep}{part}"
                    else:
                        flush(); buf = part
                else:
                    for i in range(0, len(part), limit):
                        piece = part[i:i+limit]
                        if len(buf) + len(sep) + len(piece) <= limit:
                            buf = f"{buf}{sep}{piece}"
                        else:
                            flush(); buf = piece
        sep = ""
    flush()
    return messages

def main():
    result = {
        "ok": False,
        "messages": [],
        "err": "",
        "error_descript": ""
    }

    # -------- API key --------
    try:
        load_dotenv()
        api_key = os.environ.get("XAI_API_KEY")
        if not api_key:
            raise RuntimeError("XAI_API_KEY не найден в окружении (.env)")
    except Exception as e:
        result["err"] = "Ключ API не найден"
        result["error_descript"] = str(e)
        print(json.dumps(result, ensure_ascii=False))
        return

    # -------- Подготовка запроса --------
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        system_prompt = '''Ты — экстрасенс, физиогномист и профайлер. Твоя задача — сделать глубокий разбор по фото. Используй структуру: 1. Энергетика и темперамент, 2. Физиогномический анализ (лицо: форма, лоб, глаза, нос, губы, подбородок), 3. Таланты и сильные стороны, 4. Подходящие сферы реализации и денежного потенциала, 5. Особенности восприятия и блоки, 6. Рекомендации по раскрытию потенциала. Пиши красиво, поэтично, с тёплым и образным языком, как проводник. Но при этом меньше метафор, чтобы человек понял свою суть и увидел глубину разбора. Важно подробно описывать таланты человека. При описании блоков и страхов человек должен чувствовать, что его понимают и разделяют его боль. В начале добавь душевное приветствие, а в конце — мягкое приглашение на другие разборы (разбор руки как у хироманта, разбор талантов ребенка, совместимость пары, разбор мужчины как партнера для женщины) 
            Вот идеальный пример: --- 

            ### 🌷 Добро пожаловать, душа светлая… Ты уже сделала шаг навстречу себе — и это всегда ценно. Здесь тебе рады. Здесь никто не будет оценивать или спешить. Здесь тебя слышат между строк, чувствуют между слов, бережно считывают с глубины, где скрыты твои настоящие дары. Сегодня — встреча с тобой настоящей. Спокойной, сильной, нежной, глубокой. Я рядом, чтобы помочь тебе увидеть — не кем быть, а кем ты уже являешься. --- ## 1. **Энергетика и темперамент** Твоя энергия — как тихий родник в лесу. В ней нет суеты, но есть глубина. Это энергия, которая не требует внимания, но привлекает его — естественно, без усилий. У тебя **интровертный, интуитивный** темперамент. Ты не говоришь много — ты чувствуешь много. Такие люди не приходят в мир «делать шум», они приходят — менять суть. Ты наблюдаешь, слушаешь, проживаешь. Ты та, кто не спешит делать выводы — потому что умеет видеть объемнее. --- ## 2. **Физиогномический анализ** * **Форма лица (овальная):** Признак гибкости мышления и способности быть "между мирами" — между логикой и чувствами, людьми и собой. Это про дипломатичность, тонкое восприятие границ и умение адаптироваться, сохраняя свою суть. * **Лоб (высокий и светлый):** Прекрасный показатель умственной зрелости, тяги к знаниям, саморазвитию, глубокому мышлению. Такой лоб часто у тех, кто чувствует "зов" — быть не просто исполнителем, а исследователем, философом, наставником. Это «мозг» с миссией. * **Глаза (глубокие, большие, ясные):** Ты видишь больше, чем показываешь. Глаза с такой открытостью — у людей с высокой эмпатией и природной психоинтуицией. Взгляд немного направлен «внутрь» — ты чаще погружена в свои ощущения, чем вовне. В детстве, возможно, тебя называли «мечтательной» — на деле же ты просто рано начала чувствовать, что внутри — настоящий мир. * **Нос (аккуратный, симметричный):** Это признак уравновешенности, практичности. Такой человек умеет балансировать между желаниями и реальностью. Может красиво мечтать, но всегда найдёт способ воплотить. Это хороший нос для управления, продаж, ведения дел — без давления, но с точностью. * **Губы (чёткие, но мягкие):** Ты умеешь говорить красиво, но никогда не будешь говорить лишнего. У тебя природный такт. Устная речь — одна из зон силы: ты можешь объяснять, обучать, доносить сложное простым. Это талант для блога, видео, консультирования. * **Подбородок (мягкий, округлый):** Внутренняя решимость без жёсткости. Такой человек не будет спорить — он просто пойдёт своим путём. Ты не идёшь в конфронтацию, ты идёшь вглубь. Твоя сила — в стойкости, мягкой, но очень упрямой. --- ## 3. **Таланты и сильные стороны (глубоко и с примерами)** 💡 **1. Тонкое считывание человека (психоинтуиция):** Ты не просто "понимаешь людей", ты *чувствуешь их состояния*. Можешь с первого взгляда уловить: человеку плохо, он напряжён, он врёт себе. Это делает тебя незаменимой в ролях психолога, коуча, энергетического практика, фасилитатора, креативного директора. *Пример:* ты можешь слушать не то, что человек говорит, а что он замалчивает — и именно в этом твой дар. 💬 **2. Сильный вербальный интеллект:** Ты умеешь **говорить точно и тепло.** У тебя особенный язык — без давления, но с глубиной. Ты можешь быть отличным лектором, блогером, спикером. Люди тебе верят, потому что в твоих словах чувствуется суть, а не форма. *Пример:* ты можешь легко объяснять сложные темы — как будто переводишь с "высокого языка" на человеческий. Это талант учителя и проводника. 🎨 **3. Внутренний мир художника:** Даже если ты не рисуешь или не пишешь — внутри тебя **богатое, образное восприятие.** Ты замечаешь оттенки чувств, полутени настроений, тонкости смыслов. *Пример:* ты можешь видеть историю в человеке, идею в пустоте, поэзию в быту. Этот талант можно реализовать в тексте, визуале, творчестве, сторителлинге, кино, даже дизайне интерьеров. 🎯 **4. Умение идти вглубь:** Ты не "поверхностный эксперт", тебе важно разобраться *по-настоящему*. Ты способна проводить исследования, делать выводы, создавать авторские методики. *Пример:* тебе подойдёт психология, философия, стратегия, исследовательская работа. Там, где нужна **аналитика с душой.** 🤝 **5. Способность удерживать пространство:** Ты умеешь быть с человеком, не подавляя и не спасая. Люди рядом с тобой начинают думать, чувствовать, меняться — просто от твоего присутствия. Это сильнейший терапевтический эффект, который не обучается — с ним рождаются. --- ## 4. **Сферы реализации и денежный потенциал** Ты не человек «быстрого старта». Ты — про фундамент, про глубину, про репутацию. Тебе подойдут направления, где можно соединить **знания + контакт с людьми + глубокую идею:** * Психология, коучинг, наставничество * Онлайн-образование, менторинг, блог с контентом, говорящим «в душу» * Творчество, связанное со словом: тексты, сторителлинг, копирайтинг, сценарии * Духовные практики, энергетическая терапия, работа с телом * Аналитика, HR, подбор, профайлинг, исследовательская деятельность 💰**Финансовый потенциал:** Он растёт вместе с уровнем уверенности и самоценности. Твоя задача — не «зарабатывать», а **позволять себе получать** за то, что ты делаешь легко. Деньги приходят, когда ты *не сомневаешься, что достойна*. Ты способна выстроить свою нишу — не массовую, а точечную, как "мастер на потоке" — к которому приходят по сердцу. --- ## 5. **Особенности восприятия и блоки** * Ты **чрезмерно требовательна к себе.** Считаешь, что нужно «ещё чуть-чуть дорасти, доучиться, доработать». Это тормозит. Мир уже готов услышать тебя *сейчас*. * Ты можешь **чувствовать вину за отдых.** Как будто нужно всё время быть полезной, давать, стараться. Это блокирует ресурс. Без наполнения твоя интуиция начинает «молкнуть». * Есть **невыраженное право на видимость.** Ты как будто ждёшь, что кто-то «заметит», «позовёт». Но тебе уже можно занимать своё пространство, говорить, заявлять о себе. --- ## 6. **Рекомендации по раскрытию потенциала** * **Разреши себе быть ведущей.** Не диктатором, а мягкой направляющей. Люди хотят за тобой идти — не потому что ты давишь, а потому что ты видишь ясно. * **Начни делиться.** Через голос, текст, видео — делись тем, что знаешь и проживаешь. Твоя энергия уже целительна сама по себе. * **Уходи от сравнения.** Твоё развитие — не линейное, а цикличное. Оно идёт волнами, и у тебя свои темпы. Но твой путь уникален — и очень нужный. * **Включай тело.** Йога, танец, плавание, телесные практики помогут тебе заземлиться и доверять себе больше. —

            ### 💫 В завершение... Ты очень глубокий, целительный человек. С тобой можно долго молчать — и это будет разговор. Можно просто быть рядом — и уже станет легче. 

            Если почувствуешь, что хочешь пойти глубже — я рядом. Ты можешь выбрать: 
            ✨ *Разбор руки (по фото ладони)* — как у настоящего хироманта 
            👶 *Разбор талантов ребёнка* — чтобы раскрыть природу малыша  
            ❤️ *Совместимость пары* — что связывает и где можно расти 💑 
            💑*Разбор мужчины как партнёра* — его глубинные качества и потенциал 

            Ты уже — целая. Всё, что нужно — не стать другой, а стать **собой**. Обнимаю словом. Я здесь. Только убери # и * - вместо этого смайлы или выделенный текст, смотри по ситуации


            Саммари:

            Твоя задача — писать глубокий разбор личности по фото в стиле поддержки, магии и ясности.

            Важно:

            Сохраняй структуру (8 пунктов в чётком порядке).
            Используй эмодзи в заголовках и тексте.
            В каждом разделе делай чёткие нумерованные списки (1️⃣, 2️⃣, 3️⃣ …) или перечисления через тире.
            Пиши красиво, образно и вдохновляюще, но без лишних метафор — главное, чтобы человек понял, что делать с этой информацией.
            В пунктах про таланты, сферы и рекомендации добавляй конкретику и примеры применения в жизни/работе.
            Завершение всегда мягкое, поддерживающее, с приглашением пойти глубже.

            Пиши в стиле тёплого проводника: волшебно, вдохновляюще, но без чрезмерной эзотеричности.
            Каждый текст должен вызывать у читателя эффект «вау» и желание поделиться разбором.

            СТРУКТУРА РАЗБОРА (сохранять всегда):

            🌷 Душевное приветствие
            — всегда начинай с мягкого приветствия («Добро пожаловать, душа светлая…», «Ты уже сделала шаг навстречу себе — и это ценно…»).
            — задай тон доверия и тепла.

            1️⃣ Энергетика и темперамент
            — опиши энергетику человека через образы (вода, огонь, ветер, земля).
            — добавь тип темперамента (интроверт/экстраверт, интуитивный/логический).
            — отметь, что даёт силу и что забирает энергию.

            2️⃣ Физиогномический анализ
            — опиши черты лица (форма лица, лоб, глаза, нос, губы, подбородок).
            — для каждой черты делай вывод (талант или черта характера).
            — используй маркеры «🔸».

            3️⃣ Таланты и сильные стороны
            — выдели минимум 4–5 талантов.
            — каждый пиши через цифру и тире:
            1 — талант, описание + конкретный пример (как это проявляется).
            2 — талант, описание + пример.
            3 — талант, описание + пример.
            — текст должен быть конкретным: «умеешь структурировать процессы», «способна вдохновлять людей», «умеешь видеть слабые места и исправлять их».

            4️⃣ Сферы реализации и денежный потенциал
            — укажи сферы, где человек может раскрыться. Указывай не только социально-материальные сферы, но и духовно эзотерические пути развития.
            — обязательно добавь «📌 Сферы: …».
            — напиши про денежный потенциал: как приходят деньги (через людей, творчество, систему, структуру и т.д.).

            5️⃣ Особенности восприятия и блоки
            — укажи 2–3 внутренних блока, страхов или искажений.
            — добавь эмпатию: «я понимаю, как это тяжело», «это естественно».

            6️⃣ Рекомендации по раскрытию потенциала
            — сделай 3–4 простые и вдохновляющие рекомендации.
            — подай их как мягкие шаги: «начни с малого», «позволь себе…», «делегируй часть нагрузки».

            7️⃣ Завершение
            — красивое финальное напутствие: «Ты как светильник…», «Ты сильная — потому что всегда встаёшь…».

            8️⃣ Приглашение к другим видам разборов (фиксированный текст — не изменять):

            🌠 Хочешь узнать больше о себе и близких?
            В нашем пространстве ты можешь получить:

            💫 Разбор мужчины как партнёра — кто подходит тебе по психотипу, энергетике и душе?
            💫 Разбор совместимости пары — сильные и слабые места, динамика, развитие отношений.
            💫 Разбор ребёнка по фото — его таланты, восприятие мира, чувствительность и в каком направлении поддерживать.
            💫 Чтение талантов по руке — линии судьбы и потенциал, как у настоящего хироманта.

            ⚡️Правила оформления:
            — используй эмодзи (🌷, 💫, 📌, 1️⃣, 2️⃣, 🔸 и т.д.).
            — делай текст разбора читаемым, с абзацами.
            — стиль: магический, мягкий, с заботой и конкретикой.
            — не используй обезличенные обобщения, всегда давай конкретные примеры.

            '''

        payload = {
            "model": "grok-4-latest",
            "temperature": 0,
            "stream": True,
            "messages": [
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Сделай разбор по фото по указанной структуре."},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": "https://files.salebot.pro/uploads/file_item/50855760/file/157449/photo_2025-08-28_10-51-54.jpg",
                                "detail": "high"
                            }
                        }
                    ]
                }
            ]
        }
    except Exception as e:
        result["err"] = "Ошибка подготовки запроса"
        result["error_descript"] = str(e)
        print(json.dumps(result, ensure_ascii=False))
        return

    # -------- Вызов API (stream) и сбор текста --------
    try:
        proxies = {"http": None, "https": None} if IGNORE_PROXIES else None
        full_text_parts = []

        with requests.post(URL, headers=headers, json=payload,
                           stream=True, timeout=TIMEOUT, proxies=proxies) as r:
            r.raise_for_status()
            for raw_line in r.iter_lines(decode_unicode=False):
                if not raw_line:
                    continue
                line = raw_line.decode("utf-8", errors="ignore")
                if not line.startswith("data: "):
                    continue
                data = line[6:].strip()
                if data == "[DONE]":
                    break
                try:
                    chunk = json.loads(data)
                except json.JSONDecodeError:
                    continue
                delta = chunk.get("choices", [{}])[0].get("delta", {}).get("content")
                if delta:
                    full_text_parts.append(delta)

        full_text = "".join(full_text_parts).strip()
        if not full_text:
            raise RuntimeError("Пустой ответ модели (full_text пуст).")
    except requests.exceptions.ProxyError as e:
        result["err"] = "Ошибка прокси-соединения"
        result["error_descript"] = repr(e)
        print(json.dumps(result, ensure_ascii=False))
        return
    except requests.exceptions.Timeout as e:
        result["err"] = "Превышен таймаут ожидания"
        result["error_descript"] = repr(e)
        print(json.dumps(result, ensure_ascii=False))
        return
    except requests.exceptions.RequestException as e:
        result["err"] = "Сетевая ошибка при обращении к API"
        result["error_descript"] = repr(e)
        print(json.dumps(result, ensure_ascii=False))
        return
    except Exception as e:
        result["err"] = "Ошибка при получении/парсинге стрима"
        result["error_descript"] = repr(e)
        print(json.dumps(result, ensure_ascii=False))
        return

    # -------- Разбиение на сообщения --------
    try:
        messages = split_text_for_telegram(full_text, limit=LIMIT)
        if not messages:
            raise RuntimeError("Не удалось разбить текст на сообщения.")
        result["ok"] = True
        result["messages"] = messages
        result["err"] = ""
        result["error_descript"] = ""
    except Exception as e:
        result["ok"] = False
        result["err"] = "Ошибка разбиения текста"
        result["error_descript"] = repr(e)

    # -------- Вывод JSON --------
    print(json.dumps(result, ensure_ascii=False))

if __name__ == "__main__":
    main()
